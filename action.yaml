name: "Deploy to Orbiter"
description: "Deploy your static app to Orbiter"
branding:
  icon: "upload-cloud"
  color: "blue"
inputs:
  node-version:
    description: "Node.js version to use"
    required: false
    default: "20.x"
  build-command:
    description: "Command to build your application"
    required: false
    default: "npm run build"
  build-dir:
    description: "Directory containing build output to deploy"
    required: true
  project-name:
    description: "Name of your Orbiter project"
    required: true
  api-key:
    description: "Orbiter API key"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check if API key exists
      shell: bash
      run: |
        if [ -z "${{ inputs.api-key }}" ]; then
        echo "ðŸš¨ ORBITER_API_KEY not found! Please follow these steps:"
        echo ""
        echo "1. Go to https://app.orbiter.host/api-keys"
        echo "2. Generate a new API key"
        echo "3. Go to https://github.com/${{ github.repository }}/settings/secrets/actions"
        echo "4. Click 'New repository secret'"
        echo "5. Name: ORBITER_API_KEY"
        echo "6. Value: Your API key from step 2"
        echo "7. Click 'Add secret'"
        echo ""
        echo "Once done, re-run this workflow."
          exit 1
        fi

    - name: Check required inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.build-dir }}" ]; then
          echo "ðŸš¨ build-dir input is required but was not provided"
          exit 1
        fi

        if [ -z "${{ inputs.project-name }}" ]; then
          echo "ðŸš¨ project-name input is required but was not provided"
          exit 1
        fi

    - name: Detect package manager
      shell: bash
      id: detect-pm
      run: |
        BUILD_CMD="${{ inputs.build-command }}"
        if [[ $BUILD_CMD == "npm "* ]]; then
          echo "manager=npm" >> $GITHUB_OUTPUT
        elif [[ $BUILD_CMD == "yarn "* ]]; then
          echo "manager=yarn" >> $GITHUB_OUTPUT
        elif [[ $BUILD_CMD == "pnpm "* ]]; then
          echo "manager=pnpm" >> $GITHUB_OUTPUT
        else
          echo "manager=npm" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}

    - name: Setup pnpm
      if: steps.detect-pm.outputs.manager == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Setup yarn
      if: steps.detect-pm.outputs.manager == 'yarn'
      shell: bash
      run: npm install -g yarn

    - name: Install dependencies
      shell: bash
      run: |
        case "${{ steps.detect-pm.outputs.manager }}" in
          "npm")
            npm ci
            ;;
          "yarn")
            yarn install --frozen-lockfile
            ;;
          "pnpm")
            pnpm install --frozen-lockfile
            ;;
          *)
            echo "Unsupported package manager: ${{ steps.detect-pm.outputs.manager }}"
            exit 1
            ;;
        esac

    - name: Build
      shell: bash
      run: ${{ inputs.build-command }}

    - name: Deploy to Orbiter
      shell: bash
      env:
        ORBITER_API_KEY: ${{ inputs.api-key }}
      run: npx orbiter-cli update -d ${{ inputs.project-name }} ${{ inputs.build-dir }}
