name: "Deploy to Orbiter - Flexible"
description: "Deploy your static app to Orbiter"
branding:
  icon: "upload-cloud"
  color: "blue"
inputs:
  node-version:
    description: "Node.js version to use (only needed for npm/yarn/pnpm or deploying to Orbiter)"
    required: false
    default: "20.x"
  skip-install:
    description: "Skip the dependency installation step"
    required: false
    default: "false"
  install-command:
    description: "Custom command to install dependencies"
    required: false
    default: ""
  build-command:
    description: "Command to build your application"
    required: false
    default: ""
  package-manager:
    description: "Package manager to use (npm, yarn, pnpm, bun, or custom)"
    required: false
    default: "npm"
  build-dir:
    description: "Directory containing build output to deploy"
    required: true
  project-name:
    description: "Name of your Orbiter project"
    required: true
  api-key:
    description: "Orbiter API key"
    required: true
  setup-ruby:
    description: "Setup Ruby environment (version)"
    required: false
    default: ""
  setup-python:
    description: "Setup Python environment (version)"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check if API key exists
      shell: bash
      run: |
        if [ -z "${{ inputs.api-key }}" ]; then
          echo "ðŸš¨ ORBITER_API_KEY not found! Please follow these steps:"
          echo ""
          echo "1. Go to https://app.orbiter.host/api-keys"
          echo "2. Generate a new API key"
          echo "3. Go to https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo "4. Click 'New repository secret'"
          echo "5. Name: ORBITER_API_KEY"
          echo "6. Value: Your API key from step 2"
          echo "7. Click 'Add secret'"
          echo ""
          echo "Once done, re-run this workflow."
          exit 1
        fi

    - name: Check required inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.build-dir }}" ]; then
          echo "ðŸš¨ build-dir input is required but was not provided"
          exit 1
        fi

        if [ -z "${{ inputs.project-name }}" ]; then
          echo "ðŸš¨ project-name input is required but was not provided"
          exit 1
        fi

    # Setup Ruby if specified
    - name: Setup Ruby
      if: inputs.setup-ruby != ''
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.setup-ruby }}
        bundler-cache: true

    # Setup Python if specified
    - name: Setup Python
      if: inputs.setup-python != ''
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.setup-python }}

    # Always setup Node.js for the Orbiter CLI
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}

    # Setup package managers if needed
    - name: Setup pnpm
      if: inputs.package-manager == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Setup yarn
      if: inputs.package-manager == 'yarn'
      shell: bash
      run: npm install -g yarn

    - name: Setup Bun
      if: inputs.package-manager == 'bun'
      shell: bash
      run: npm install -g bun

    # Install dependencies if not skipped
    - name: Install dependencies
      if: inputs.skip-install != 'true'
      shell: bash
      run: |
        if [ ! -z "${{ inputs.install-command }}" ]; then
          # Run custom install command if provided
          ${{ inputs.install-command }}
        else
          # Use package manager determined by input
          case "${{ inputs.package-manager }}" in
            "npm")
              npm ci
              ;;
            "yarn")
              yarn install --frozen-lockfile
              ;;
            "pnpm")
              pnpm install --frozen-lockfile
              ;;
            "bun")
              bun install
              ;;
            "custom")
              echo "Using custom package manager. Provide an install-command to install dependencies."
              ;;
            *)
              echo "Unsupported package manager: ${{ inputs.package-manager }}"
              exit 1
              ;;
          esac
        fi

    # Build step
    - name: Build
      if: inputs.build-command != ''
      shell: bash
      run: ${{ inputs.build-command }}

    # Deploy to Orbiter
    - name: Deploy to Orbiter
      shell: bash
      env:
        ORBITER_API_KEY: ${{ inputs.api-key }}
        SOURCE: github-action
      run: npx orbiter-cli update -d ${{ inputs.project-name }} ${{ inputs.build-dir }}
